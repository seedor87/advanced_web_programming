#! /usr/bin/perl -w

# Scrape1.cgi - demonstrate screen-scraping in Perl
# D Provine and Bob S.

use strict;
use warnings;
use CGI;
use WWW::Mechanize;     # This is the object that gets stuff
use HTML::TokeParser;   # This is the object that parses HTML
use Scalar::Util qw(looks_like_number); # needed to parse url for number

# create new web agent and get a page
my $agent = WWW::Mechanize->new();
my $url = "http://www.vgcats.com/super/?strip_id=85"; # url of last comic they produced
my $base_url = "http://www.vgcats.com/super/";

my $index = substr($url, -1);
$url = substr($url, 0, (length $url) -1);
my $next_index = substr($url, -1);

while (looks_like_number $next_index) {
    $index = substr($url, -1) . $index;
    $url = substr($url, 0, (length $url) -1);
    $next_index = substr($url, -1);
}
my $base_image = $url;
my $count = 7;
my $new_url = $base_image . $index;

# Generate a bunch of output:
my $cgi = new CGI;

print $cgi->header(-type=>'text/html'),
    $cgi->start_html('Bob S.\'s Screen Scraper');

print $cgi->h1("Super Effective --PKM"), "\n";

do {    
    
    $new_url = $base_image . $index;
    $agent->get($new_url); # changed to my URL

    # create new HTML parser and get the content from the web agent
    my $stream = HTML::TokeParser->new(\$agent->{content});

    # get the first "div" tag to setup the loop...
    my $tag = $stream->get_tag("div");

    while ($tag->[1]{align} and $tag->[1]{align} ne 'center') {
	$tag = $stream->get_tag("div");
    }

    # advance to the div with the cartoon:
    while ($tag->[1]{width} and $tag->[1]{width} ne '660') {
	$tag = $stream->get_tag("div");
    }

    $tag = $stream->get_tag("div");
    $tag = $stream->get_tag("div");
    $tag = $stream->get_tag("p");

    # get the cartoon:
    my $toon = $stream->get_tag("img");

    # get the attributes from the "img" tag:
    my $source = $toon->[1]{'src'};
    $source = $base_url . $source;
    my $popup = $base_url . "siteimages/title.gif";
    my $caption = $new_url;

    print $cgi->a({href=>$caption}), "link to comic #" . $index, "\n\n";
    print $cgi->br();
    print $cgi->img({src=>$source, alt=>$caption}), "\n\n";

    $index = $index - 1;
    $count = $count -1;
} while ($index > 0 && $count > 0);


=pod

# now do "Over the Hedge" (note: same objects re-used, no "new()" )
$agent->get("http://www.gocomics.com/overthehedge");
$stream = HTML::TokeParser->new(\$agent->{content});

# HTML is like this:
# <div class="control-nav-newer"><a role='button' href=''
#      class='fa btn btn-outline-default btn-circle fa-caret-right sm disabled'
#      title='' ></a></div>
#    <div class="item-comic-container">
#    <header class="item-title">
#    <h1>
#    <a href="/overthehedge" class="link-blended">
#    Over the Hedge  <small> by T Lewis and Michael Fry</small>
#    </a>
#    </h1>
#    </header>
#
#    <a itemprop="image" class="item-comic-link js-item-comic-link "
#        href="/overthehedge/2017/02/08"
#         title="Over the Hedge for 2017-02-08">
#    <picture class="img-fluid item-comic-image">
#         <img width="900" sizes="100vw"
# srcset="http://assets.amuniversal.com/434e8380c950013441e2005056a9545d 1980w"
#  src="http://assets.amuniversal.com/434e8380c950013441e2005056a9545d" />
# </picture>
#
#    </a>
#    <meta itemprop="isFamilyFriendly" content="true">
#        </div><!-- /.item-comic-container -->
#
# I think we want the "img" tag inside the "picture" tag.

# Advance to the "div" tag we want:
$tag = $stream->get_tag("picture");

while ($tag->[1]{class} and $tag->[1]{class} ne 'item-comic-container') {
    $tag = $stream->get_tag("div");
}

#    while ($tag->[1]{class} and $tag->[1]{class} ne 'item-expand') {
#        $tag = $stream->get_tag("div");
#    }

# advance to the picture:
$toon = $stream->get_tag("picture");

# advance to the image:
$toon = $stream->get_tag("img");

# get the attribute from the tag:
$source = $toon->[1]{'src'};

# add this to the CGI output

print $cgi->h1("Over the Hedge");

print $cgi->img({src=>$source, alt=>'Over the Hedge'}), "\n\n";

=cut

# ALL DONE!
print $cgi->end_html, "\n";

